posX(0..7).
posY(0..7).
#maxint = 100000000.
%guess
goUpDx | goUpSx | goBackDx | goBackSx :- fox(X,Y,0).

fox(Q,K,1)  :- fox(X,Y,0), Q=X+1, K=Y+1,Q>=0, Q<=7, K>=0, K<=7, goUpDx.
fox(Q,K,1)  :- fox(X,Y,0), Q=X-1, K=Y+1,Q>=0, Q<=7, K>=0, K<=7, goUpSx.
fox(Q,K,1)  :- fox(X,Y,0), Q=X-1, K=Y-1,Q>=0, Q<=7, K>=0, K<=7, goBackSx.
fox(Q,K,1)  :- fox(X,Y,0), Q=X+1, K=Y-1,Q>=0, Q<=7, K>=0, K<=7, goBackDx.

moved:- fox(_,_,1).
:- not moved.

idHound(1..4).

%not allowed to move to a busy position
:- hound(0,X1,Y1,_), fox(X1,Y1,1).

canMoveUpDx:- fox(X,Y,0), not hound(0,X1,Y1,I), idHound(I), X1 =X+1, Y1=Y+1.
canMoveUpSx:- fox(X,Y,0), not hound(0,X1,Y1,I), idHound(I), X1 =X-1, Y1=Y+1.
canMoveUp:-canMoveUpDx.
canMoveUp:-canMoveUpSx.

%muovo avanti se posso 
moveUp :- goUpDx.
moveUp :- goUpSx.
:~ canMoveUp, not moveUp. [1:2]

%---------------------move back
canMoveBack:- fox(X,Y,0), not hound(0,X1,Y1,I), idHound(I), X1 =X+1, Y1=Y-1.
canMoveBack:- fox(X,Y,0), not hound(0,X1,Y1,I), idHound(I), X1 =X-1, Y1=Y-1.

%muovo indietro 
moveBack :- goBackDx.
moveBack :- goBackSx.

%se ho un cane a dx/sx ma posso andare avanti, ci vado altrimenti pago
:~fox(X,Y,0), hound(0,X1,Y1,_), adiacenteUppSx(X,Y,X1,Y1), canMoveUp, not goUpDx. [1:3]
:~fox(X,Y,0), hound(0,X1,Y1,_), adiacenteUppDx(X,Y,X1,Y1), canMoveUp, not goUpSx. [1:3]


cella(X,Y):- posX(X), posY(Y).

adiacenteUppDx(X,Y,X1,Y1):- cella(X,Y), cella(X1,Y1), X1 = X+1, Y1 = Y+1.
adiacenteUppSx(X,Y,X1,Y1):- cella(X,Y), cella(X1,Y1), X1 = X-1, Y1 = Y+1.
adiacenteDownnSx(X,Y,X1,Y1):-cella(X,Y), cella(X1,Y1), X1 = X-1, Y1 = Y-1.
adiacenteDownnDx(X,Y,X1,Y1):- cella(X,Y), cella(X1,Y1), X1 = X+1, Y1 = Y-1.

adiacente(X,Y,X1,Y1):-adiacenteUppDx(X,Y,X1,Y1).
adiacente(X,Y,X1,Y1):-adiacenteUppSx(X,Y,X1,Y1).
adiacente(X,Y,X1,Y1):-adiacenteDownnSx(X,Y,X1,Y1).
adiacente(X,Y,X1,Y1):-adiacenteDownnDx(X,Y,X1,Y1).

%----------QUANDO HO UN CANE SOPRA LA FOX O SULLE DIAGONALI SUPERIORI(ANCHE ALLUNGATE) AZIONO IL CAMMINO MINIMO---------------

pecorasulladiagonale:- fox(X,Y,0), hound(0,X1,Y1,_), adiacenteUppDx(X,Y,X1,Y1).
pecorasulladiagonale:- fox(X,Y,0), hound(0,X1,Y1,_), adiacenteUppSx(X,Y,X1,Y1).
pecorasulladiagonale:- fox(X,Y,0), hound(0,X1,Y1,_), X1 = X+2, Y1 = Y+2.
pecorasulladiagonale:- fox(X,Y,0), hound(0,X1,Y1,_), X1 = X-2, Y1 = Y+2.

haveHoundUp:- fox(X,Y,0), hound(0,X1,Y1,_), X1 = X, Y1 = Y+2.

okvai :- haveHoundUp.
okvai :- pecorasulladiagonale.

finaldistance(L):- distanza(S), L=S+1.


%-----------------TROVARE POSIZIONE LIBERA SULLA RIGA DOVE SI TROVA L'ULTIMO CANE------------------------------------
%devo trovare la riga dove si trova l'ultimo cane
contR(NR):- fox(X,Y,0), #max{ Q : hound(0,Z,Q,_), posX(Z), posY(Q), Q>Y} = NR.

rigapiena :- contR(Y), #count{X: hound(0,X,Y,_)} = 4.
rigaTarget(R) :- contR(R), not rigapiena.	
rigaTarget(S) :- contR(R), rigapiena, S=R-1.

posoccupata(X,Y):- rigaTarget(Y), posX(X), hound(0,X,Y,_).
datrovare(X,Y) | nonDaTrovare(X,Y):- rigaTarget(Y), posX(X), not posoccupata(X,Y), X<>0,X<>2, X<>4, X<>6.

:-rigaTarget(Y),#count{X : datrovare(X,Y)} > 1.
:-rigaTarget(Y),#count{X : datrovare(X,Y)} < 1.

posBusy(X,Y):- hound(0,X,Y,_).
%--------------------------------------------CAMMINO MINIMO------------------------------------------------------
%geometria del taxi
distanza(L) :- fox(X,Y,0), datrovare(X1,Y1), X1>=X, Y1>=Y,  P = X1-X, K = Y1-Y, L= P+K.
distanza(L) :- fox(X,Y,0), daTrovare(X1,Y1), X1<X, Y1>=Y ,P = X-X1, K = Y1-Y, L= P+K.
distanza(L) :- fox(X,Y,0), daTrovare(X1,Y1), X1>=X, Y1<Y ,P = X1-X, K = Y-Y1, L= P+K.
distanza(L) :- fox(X,Y,0), daTrovare(X1,Y1), X1<X, Y1<Y, P = X-X1, K = Y-Y1, L= P+K.

collegati(X,Y,X1,Y1):- cella(X,Y), cella(X1,Y1), adiacente(X,Y,X1,Y1), not posBusy(X1,Y1).

path(cella(X,Y), cella(X1,Y1), [cella(X,Y), cella(X1,Y1)], 1) :- collegati(X,Y,X1,Y1), fox(X,Y,0), okvai.

path(cella(X,Y), cella(M,N), P, D) :- path(cella(X,Y), cella(X1,Y1), P1, D1),
		                  collegati(X1,Y1,M,N),
		                  datrovare(T,R),
		                  M <= T,
		            	  okvai,
		                  fox(X,Y,0),
		                  #insLast(P1, cella(M,N), P),
		                  not #member(cella(M,N), P1),
		                  D = D1 + 1,
		                  finaldistance(B),
		                  D<B.
		                  
               
shortest_path(P,L) :- fox(X,Y,0), datrovare(X1,Y1), okvai, path(cella(X,Y), cella(X1,Y1), P, L).

lenght_p(L) :- shortest_path(P,L).

%lenght_p(1).lenght_p(2).lenght_p(3).

%shortest_top(W):- #min{L: lenght_p(L)}=W.

%pathq(P) :- #count{X,Y: cella(X,Y)} = P.



